{
  "version": 3,
  "sources": ["../../easystarjs/src/instance.js", "../../easystarjs/src/node.js", "../../heap/lib/heap.js", "../../heap/index.js", "../../easystarjs/src/easystar.js"],
  "sourcesContent": ["/**\n * Represents a single instance of EasyStar.\n * A path that is in the queue to eventually be found.\n */\nmodule.exports = function() {\n    this.pointsToAvoid = {};\n    this.startX;\n    this.callback;\n    this.startY;\n    this.endX;\n    this.endY;\n    this.nodeHash = {};\n    this.openList;\n};", "/**\n* A simple Node that represents a single tile on the grid.\n* @param {Object} parent The parent node.\n* @param {Number} x The x position on the grid.\n* @param {Number} y The y position on the grid.\n* @param {Number} costSoFar How far this node is in moves*cost from the start.\n* @param {Number} simpleDistanceToTarget Manhatten distance to the end point.\n**/\nmodule.exports = function(parent, x, y, costSoFar, simpleDistanceToTarget) {\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    this.costSoFar = costSoFar;\n    this.simpleDistanceToTarget = simpleDistanceToTarget;\n\n    /**\n    * @return {Number} Best guess distance of a cost using this node.\n    **/\n    this.bestGuessDistance = function() {\n        return this.costSoFar + this.simpleDistanceToTarget;\n    }\n};", "// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n", "module.exports = require('./lib/heap');\n", "/**\n*   EasyStar.js\n*   github.com/prettymuchbryce/EasyStarJS\n*   Licensed under the MIT license.\n*\n*   Implementation By Bryce Neal (@prettymuchbryce)\n**/\n\nvar EasyStar = {}\nvar Instance = require('./instance');\nvar Node = require('./node');\nvar Heap = require('heap');\n\nconst CLOSED_LIST = 0;\nconst OPEN_LIST = 1;\n\nmodule.exports = EasyStar;\n\nvar nextInstanceId = 1;\n\nEasyStar.js = function() {\n    var STRAIGHT_COST = 1.0;\n    var DIAGONAL_COST = 1.4;\n    var syncEnabled = false;\n    var pointsToAvoid = {};\n    var collisionGrid;\n    var costMap = {};\n    var pointsToCost = {};\n    var directionalConditions = {};\n    var allowCornerCutting = true;\n    var iterationsSoFar;\n    var instances = {};\n    var instanceQueue = [];\n    var iterationsPerCalculation = Number.MAX_VALUE;\n    var acceptableTiles;\n    var diagonalsEnabled = false;\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array|Number} tiles An array of numbers that represent\n    * which tiles in your grid should be considered\n    * acceptable, or \"walkable\".\n    **/\n    this.setAcceptableTiles = function(tiles) {\n        if (tiles instanceof Array) {\n            // Array\n            acceptableTiles = tiles;\n        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {\n            // Number\n            acceptableTiles = [tiles];\n        }\n    };\n\n    /**\n    * Enables sync mode for this EasyStar instance..\n    * if you're into that sort of thing.\n    **/\n    this.enableSync = function() {\n        syncEnabled = true;\n    };\n\n    /**\n    * Disables sync mode for this EasyStar instance.\n    **/\n    this.disableSync = function() {\n        syncEnabled = false;\n    };\n\n    /**\n     * Enable diagonal pathfinding.\n     */\n    this.enableDiagonals = function() {\n        diagonalsEnabled = true;\n    }\n\n    /**\n     * Disable diagonal pathfinding.\n     */\n    this.disableDiagonals = function() {\n        diagonalsEnabled = false;\n    }\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array} grid The collision grid that this EasyStar instance will read from.\n    * This should be a 2D Array of Numbers.\n    **/\n    this.setGrid = function(grid) {\n        collisionGrid = grid;\n\n        //Setup cost map\n        for (var y = 0; y < collisionGrid.length; y++) {\n            for (var x = 0; x < collisionGrid[0].length; x++) {\n                if (!costMap[collisionGrid[y][x]]) {\n                    costMap[collisionGrid[y][x]] = 1\n                }\n            }\n        }\n    };\n\n    /**\n    * Sets the tile cost for a particular tile type.\n    *\n    * @param {Number} The tile type to set the cost for.\n    * @param {Number} The multiplicative cost associated with the given tile.\n    **/\n    this.setTileCost = function(tileType, cost) {\n        costMap[tileType] = cost;\n    };\n\n    /**\n    * Sets the an additional cost for a particular point.\n    * Overrides the cost from setTileCost.\n    *\n    * @param {Number} x The x value of the point to cost.\n    * @param {Number} y The y value of the point to cost.\n    * @param {Number} The multiplicative cost associated with the given point.\n    **/\n    this.setAdditionalPointCost = function(x, y, cost) {\n        if (pointsToCost[y] === undefined) {\n            pointsToCost[y] = {};\n        }\n        pointsToCost[y][x] = cost;\n    };\n\n    /**\n    * Remove the additional cost for a particular point.\n    *\n    * @param {Number} x The x value of the point to stop costing.\n    * @param {Number} y The y value of the point to stop costing.\n    **/\n    this.removeAdditionalPointCost = function(x, y) {\n        if (pointsToCost[y] !== undefined) {\n            delete pointsToCost[y][x];\n        }\n    }\n\n    /**\n    * Remove all additional point costs.\n    **/\n    this.removeAllAdditionalPointCosts = function() {\n        pointsToCost = {};\n    }\n\n    /**\n    * Sets a directional condition on a tile\n    *\n    * @param {Number} x The x value of the point.\n    * @param {Number} y The y value of the point.\n    * @param {Array.<String>} allowedDirections A list of all the allowed directions that can access\n    * the tile.\n    **/\n    this.setDirectionalCondition = function(x, y, allowedDirections) {\n        if (directionalConditions[y] === undefined) {\n            directionalConditions[y] = {};\n        }\n        directionalConditions[y][x] = allowedDirections;\n    };\n\n    /**\n    * Remove all directional conditions\n    **/\n    this.removeAllDirectionalConditions = function() {\n        directionalConditions = {};\n    };\n\n    /**\n    * Sets the number of search iterations per calculation.\n    * A lower number provides a slower result, but more practical if you\n    * have a large tile-map and don't want to block your thread while\n    * finding a path.\n    *\n    * @param {Number} iterations The number of searches to prefrom per calculate() call.\n    **/\n    this.setIterationsPerCalculation = function(iterations) {\n        iterationsPerCalculation = iterations;\n    };\n\n    /**\n    * Avoid a particular point on the grid,\n    * regardless of whether or not it is an acceptable tile.\n    *\n    * @param {Number} x The x value of the point to avoid.\n    * @param {Number} y The y value of the point to avoid.\n    **/\n    this.avoidAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] === undefined) {\n            pointsToAvoid[y] = {};\n        }\n        pointsToAvoid[y][x] = 1;\n    };\n\n    /**\n    * Stop avoiding a particular point on the grid.\n    *\n    * @param {Number} x The x value of the point to stop avoiding.\n    * @param {Number} y The y value of the point to stop avoiding.\n    **/\n    this.stopAvoidingAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] !== undefined) {\n            delete pointsToAvoid[y][x];\n        }\n    };\n\n    /**\n    * Enables corner cutting in diagonal movement.\n    **/\n    this.enableCornerCutting = function() {\n        allowCornerCutting = true;\n    };\n\n    /**\n    * Disables corner cutting in diagonal movement.\n    **/\n    this.disableCornerCutting = function() {\n        allowCornerCutting = false;\n    };\n\n    /**\n    * Stop avoiding all additional points on the grid.\n    **/\n    this.stopAvoidingAllAdditionalPoints = function() {\n        pointsToAvoid = {};\n    };\n\n    /**\n    * Find a path.\n    *\n    * @param {Number} startX The X position of the starting point.\n    * @param {Number} startY The Y position of the starting point.\n    * @param {Number} endX The X position of the ending point.\n    * @param {Number} endY The Y position of the ending point.\n    * @param {Function} callback A function that is called when your path\n    * is found, or no path is found.\n    * @return {Number} A numeric, non-zero value which identifies the created instance. This value can be passed to cancelPath to cancel the path calculation.\n    *\n    **/\n    this.findPath = function(startX, startY, endX, endY, callback) {\n        // Wraps the callback for sync vs async logic\n        var callbackWrapper = function(result) {\n            if (syncEnabled) {\n                callback(result);\n            } else {\n                setTimeout(function() {\n                    callback(result);\n                });\n            }\n        }\n\n        // No acceptable tiles were set\n        if (acceptableTiles === undefined) {\n            throw new Error(\"You can't set a path without first calling setAcceptableTiles() on EasyStar.\");\n        }\n        // No grid was set\n        if (collisionGrid === undefined) {\n            throw new Error(\"You can't set a path without first calling setGrid() on EasyStar.\");\n        }\n\n        // Start or endpoint outside of scope.\n        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 ||\n        startX > collisionGrid[0].length-1 || startY > collisionGrid.length-1 ||\n        endX > collisionGrid[0].length-1 || endY > collisionGrid.length-1) {\n            throw new Error(\"Your start or end point is outside the scope of your grid.\");\n        }\n\n        // Start and end are the same tile.\n        if (startX===endX && startY===endY) {\n            callbackWrapper([]);\n            return;\n        }\n\n        // End point is not an acceptable tile.\n        var endTile = collisionGrid[endY][endX];\n        var isAcceptable = false;\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (endTile === acceptableTiles[i]) {\n                isAcceptable = true;\n                break;\n            }\n        }\n\n        if (isAcceptable === false) {\n            callbackWrapper(null);\n            return;\n        }\n\n        // Create the instance\n        var instance = new Instance();\n        instance.openList = new Heap(function(nodeA, nodeB) {\n            return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();\n        });\n        instance.isDoneCalculating = false;\n        instance.nodeHash = {};\n        instance.startX = startX;\n        instance.startY = startY;\n        instance.endX = endX;\n        instance.endY = endY;\n        instance.callback = callbackWrapper;\n\n        instance.openList.push(coordinateToNode(instance, instance.startX,\n            instance.startY, null, STRAIGHT_COST));\n\n        var instanceId = nextInstanceId ++;\n        instances[instanceId] = instance;\n        instanceQueue.push(instanceId);\n        return instanceId;\n    };\n\n    /**\n     * Cancel a path calculation.\n     *\n     * @param {Number} instanceId The instance ID of the path being calculated\n     * @return {Boolean} True if an instance was found and cancelled.\n     *\n     **/\n    this.cancelPath = function(instanceId) {\n        if (instanceId in instances) {\n            delete instances[instanceId];\n            // No need to remove it from instanceQueue\n            return true;\n        }\n        return false;\n    };\n\n    /**\n    * This method steps through the A* Algorithm in an attempt to\n    * find your path(s). It will search 4-8 tiles (depending on diagonals) for every calculation.\n    * You can change the number of calculations done in a call by using\n    * easystar.setIteratonsPerCalculation().\n    **/\n    this.calculate = function() {\n        if (instanceQueue.length === 0 || collisionGrid === undefined || acceptableTiles === undefined) {\n            return;\n        }\n        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {\n            if (instanceQueue.length === 0) {\n                return;\n            }\n\n            if (syncEnabled) {\n                // If this is a sync instance, we want to make sure that it calculates synchronously.\n                iterationsSoFar = 0;\n            }\n\n            var instanceId = instanceQueue[0];\n            var instance = instances[instanceId];\n            if (typeof instance == 'undefined') {\n                // This instance was cancelled\n                instanceQueue.shift();\n                continue;\n            }\n\n            // Couldn't find a path.\n            if (instance.openList.size() === 0) {\n                instance.callback(null);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            var searchNode = instance.openList.pop();\n\n            // Handles the case where we have found the destination\n            if (instance.endX === searchNode.x && instance.endY === searchNode.y) {\n                var path = [];\n                path.push({x: searchNode.x, y: searchNode.y});\n                var parent = searchNode.parent;\n                while (parent!=null) {\n                    path.push({x: parent.x, y:parent.y});\n                    parent = parent.parent;\n                }\n                path.reverse();\n                var ip = path;\n                instance.callback(ip);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            searchNode.list = CLOSED_LIST;\n\n            if (searchNode.y > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    0, -1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y-1));\n            }\n            if (searchNode.x < collisionGrid[0].length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    1, 0, STRAIGHT_COST * getTileCost(searchNode.x+1, searchNode.y));\n            }\n            if (searchNode.y < collisionGrid.length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    0, 1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y+1));\n            }\n            if (searchNode.x > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    -1, 0, STRAIGHT_COST * getTileCost(searchNode.x-1, searchNode.y));\n            }\n            if (diagonalsEnabled) {\n                if (searchNode.x > 0 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, -1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, 1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y+1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, -1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x > 0 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, 1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y+1));\n                    }\n                }\n            }\n\n        }\n    };\n\n    // Private methods follow\n    var checkAdjacentNode = function(instance, searchNode, x, y, cost) {\n        var adjacentCoordinateX = searchNode.x+x;\n        var adjacentCoordinateY = searchNode.y+y;\n\n        if ((pointsToAvoid[adjacentCoordinateY] === undefined ||\n             pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === undefined) &&\n            isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {\n            var node = coordinateToNode(instance, adjacentCoordinateX,\n                adjacentCoordinateY, searchNode, cost);\n\n            if (node.list === undefined) {\n                node.list = OPEN_LIST;\n                instance.openList.push(node);\n            } else if (searchNode.costSoFar + cost < node.costSoFar) {\n                node.costSoFar = searchNode.costSoFar + cost;\n                node.parent = searchNode;\n                instance.openList.updateItem(node);\n            }\n        }\n    };\n\n    // Helpers\n    var isTileWalkable = function(collisionGrid, acceptableTiles, x, y, sourceNode) {\n        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];\n        if (directionalCondition) {\n            var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y)\n            var directionIncluded = function () {\n                for (var i = 0; i < directionalCondition.length; i++) {\n                    if (directionalCondition[i] === direction) return true\n                }\n                return false\n            }\n            if (!directionIncluded()) return false\n        }\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (collisionGrid[y][x] === acceptableTiles[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * -1, -1 | 0, -1  | 1, -1\n     * -1,  0 | SOURCE | 1,  0\n     * -1,  1 | 0,  1  | 1,  1\n     */\n    var calculateDirection = function (diffX, diffY) {\n        if (diffX === 0 && diffY === -1) return EasyStar.TOP\n        else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT\n        else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT\n        else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT\n        else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM\n        else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT\n        else if (diffX === -1 && diffY === 0) return EasyStar.LEFT\n        else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT\n        throw new Error('These differences are not valid: ' + diffX + ', ' + diffY)\n    };\n\n    var getTileCost = function(x, y) {\n        return (pointsToCost[y] && pointsToCost[y][x]) || costMap[collisionGrid[y][x]]\n    };\n\n    var coordinateToNode = function(instance, x, y, parent, cost) {\n        if (instance.nodeHash[y] !== undefined) {\n            if (instance.nodeHash[y][x] !== undefined) {\n                return instance.nodeHash[y][x];\n            }\n        } else {\n            instance.nodeHash[y] = {};\n        }\n        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);\n        if (parent!==null) {\n            var costSoFar = parent.costSoFar + cost;\n        } else {\n            costSoFar = 0;\n        }\n        var node = new Node(parent,x,y,costSoFar,simpleDistanceToTarget);\n        instance.nodeHash[y][x] = node;\n        return node;\n    };\n\n    var getDistance = function(x1,y1,x2,y2) {\n        if (diagonalsEnabled) {\n            // Octile distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            if (dx < dy) {\n                return DIAGONAL_COST * dx + dy;\n            } else {\n                return DIAGONAL_COST * dy + dx;\n            }\n        } else {\n            // Manhattan distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            return (dx + dy);\n        }\n    };\n}\n\nEasyStar.TOP = 'TOP'\nEasyStar.TOP_RIGHT = 'TOP_RIGHT'\nEasyStar.RIGHT = 'RIGHT'\nEasyStar.BOTTOM_RIGHT = 'BOTTOM_RIGHT'\nEasyStar.BOTTOM = 'BOTTOM'\nEasyStar.BOTTOM_LEFT = 'BOTTOM_LEFT'\nEasyStar.LEFT = 'LEFT'\nEasyStar.TOP_LEFT = 'TOP_LEFT'\n"],
  "mappings": "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",
  "names": ["_j", "_ref", "Heap", "require_heap", "collisionGrid", "acceptableTiles", "i"]
}
