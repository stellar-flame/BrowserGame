import { Scene, Physics } from 'phaser';

// Extend Physics.Arcade.Sprite for physics and automatic updates
export class Bullet extends Physics.Arcade.Sprite {
    // Body is inherited from Physics.Arcade.Sprite
    body!: Physics.Arcade.Body;
    private speed: number = 150; // Bullet speed

    constructor(scene: Scene, x: number, y: number) {
        // Call Sprite constructor (use __WHITE texture key for tinting)
        super(scene, x, y, '__WHITE');

        // Add to scene's display list but NOT update list initially
        scene.add.existing(this);
        // Enable physics but keep it inactive initially
        scene.physics.world.enable(this);

        // Initial visual setup (will be confirmed in fire method)
        this.setDisplaySize(10, 10);
        this.setTint(0xff0000); // Red tint
        this.setOrigin(0.5, 0.5); // Center the origin

        // Initial physics setup
        this.body.setCollideWorldBounds(false); // Don't stop at bounds
        this.body.onWorldBounds = true;       // But detect when hitting bounds
        this.body.setAllowGravity(false);
        this.body.setBounce(0);

        // Deactivate by default
        this.deactivate();
    }

    // Method to fire the bullet from a specific position towards an angle
    fire(x: number, y: number, angle: number): void {
        console.log("Bullet fire: ", x, y, angle);
        // Use enableBody to activate physics, reset position, and make active/visible
        this.enableBody(true, x, y, true, true);

        // Recalculate velocity based on angle and speed
        this.scene.physics.velocityFromAngle(angle, this.speed, this.body.velocity);

        // Ensure visual properties are set
        this.setDisplaySize(10, 10);
        this.setTint(0xff0000);

        // Optional: Add rotation tween? Need careful management with pooling. Removed for now.
    }

    // Method to deactivate the bullet (return to pool)
    deactivate(): void {
        // Use disableBody to deactivate physics, hide, and set inactive
        this.disableBody(true, true);
    }

    // Override preUpdate to check for world bounds
    preUpdate(time: number, delta: number): void {
        super.preUpdate(time, delta);

        // Deactivate if the bullet goes out of world bounds
        // Note: body.onWorldBounds must be true
        if (this.body.checkWorldBounds()) {
             // body.world.worldbounds event is also emitted, but checking here is direct
            this.deactivate();
        }
    }
}
