import {
  __commonJS
} from "./chunk-BUSYA2B4.js";

// node_modules/easystarjs/src/instance.js
var require_instance = __commonJS({
  "node_modules/easystarjs/src/instance.js"(exports, module) {
    module.exports = function() {
      this.pointsToAvoid = {};
      this.startX;
      this.callback;
      this.startY;
      this.endX;
      this.endY;
      this.nodeHash = {};
      this.openList;
    };
  }
});

// node_modules/easystarjs/src/node.js
var require_node = __commonJS({
  "node_modules/easystarjs/src/node.js"(exports, module) {
    module.exports = function(parent, x, y, costSoFar, simpleDistanceToTarget) {
      this.parent = parent;
      this.x = x;
      this.y = y;
      this.costSoFar = costSoFar;
      this.simpleDistanceToTarget = simpleDistanceToTarget;
      this.bestGuessDistance = function() {
        return this.costSoFar + this.simpleDistanceToTarget;
      };
    };
  }
});

// node_modules/heap/lib/heap.js
var require_heap = __commonJS({
  "node_modules/heap/lib/heap.js"(exports, module) {
    (function() {
      var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;
      floor = Math.floor, min = Math.min;
      defaultCmp = function(x, y) {
        if (x < y) {
          return -1;
        }
        if (x > y) {
          return 1;
        }
        return 0;
      };
      insort = function(a, x, lo, hi, cmp) {
        var mid;
        if (lo == null) {
          lo = 0;
        }
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (lo < 0) {
          throw new Error("lo must be non-negative");
        }
        if (hi == null) {
          hi = a.length;
        }
        while (lo < hi) {
          mid = floor((lo + hi) / 2);
          if (cmp(x, a[mid]) < 0) {
            hi = mid;
          } else {
            lo = mid + 1;
          }
        }
        return [].splice.apply(a, [lo, lo - lo].concat(x)), x;
      };
      heappush = function(array, item, cmp) {
        if (cmp == null) {
          cmp = defaultCmp;
        }
        array.push(item);
        return _siftdown(array, 0, array.length - 1, cmp);
      };
      heappop = function(array, cmp) {
        var lastelt, returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        lastelt = array.pop();
        if (array.length) {
          returnitem = array[0];
          array[0] = lastelt;
          _siftup(array, 0, cmp);
        } else {
          returnitem = lastelt;
        }
        return returnitem;
      };
      heapreplace = function(array, item, cmp) {
        var returnitem;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        returnitem = array[0];
        array[0] = item;
        _siftup(array, 0, cmp);
        return returnitem;
      };
      heappushpop = function(array, item, cmp) {
        var _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (array.length && cmp(array[0], item) < 0) {
          _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
          _siftup(array, 0, cmp);
        }
        return item;
      };
      heapify = function(array, cmp) {
        var i, _i, _j, _len, _ref, _ref1, _results, _results1;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        _ref1 = (function() {
          _results1 = [];
          for (var _j2 = 0, _ref2 = floor(array.length / 2); 0 <= _ref2 ? _j2 < _ref2 : _j2 > _ref2; 0 <= _ref2 ? _j2++ : _j2--) {
            _results1.push(_j2);
          }
          return _results1;
        }).apply(this).reverse();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          i = _ref1[_i];
          _results.push(_siftup(array, i, cmp));
        }
        return _results;
      };
      updateItem = function(array, item, cmp) {
        var pos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        pos = array.indexOf(item);
        if (pos === -1) {
          return;
        }
        _siftdown(array, 0, pos, cmp);
        return _siftup(array, pos, cmp);
      };
      nlargest = function(array, n, cmp) {
        var elem, result, _i, _len, _ref;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        result = array.slice(0, n);
        if (!result.length) {
          return result;
        }
        heapify(result, cmp);
        _ref = array.slice(n);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          heappushpop(result, elem, cmp);
        }
        return result.sort(cmp).reverse();
      };
      nsmallest = function(array, n, cmp) {
        var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        if (n * 10 <= array.length) {
          result = array.slice(0, n).sort(cmp);
          if (!result.length) {
            return result;
          }
          los = result[result.length - 1];
          _ref = array.slice(n);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            elem = _ref[_i];
            if (cmp(elem, los) < 0) {
              insort(result, elem, 0, null, cmp);
              result.pop();
              los = result[result.length - 1];
            }
          }
          return result;
        }
        heapify(array, cmp);
        _results = [];
        for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          _results.push(heappop(array, cmp));
        }
        return _results;
      };
      _siftdown = function(array, startpos, pos, cmp) {
        var newitem, parent, parentpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        newitem = array[pos];
        while (pos > startpos) {
          parentpos = pos - 1 >> 1;
          parent = array[parentpos];
          if (cmp(newitem, parent) < 0) {
            array[pos] = parent;
            pos = parentpos;
            continue;
          }
          break;
        }
        return array[pos] = newitem;
      };
      _siftup = function(array, pos, cmp) {
        var childpos, endpos, newitem, rightpos, startpos;
        if (cmp == null) {
          cmp = defaultCmp;
        }
        endpos = array.length;
        startpos = pos;
        newitem = array[pos];
        childpos = 2 * pos + 1;
        while (childpos < endpos) {
          rightpos = childpos + 1;
          if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
            childpos = rightpos;
          }
          array[pos] = array[childpos];
          pos = childpos;
          childpos = 2 * pos + 1;
        }
        array[pos] = newitem;
        return _siftdown(array, startpos, pos, cmp);
      };
      Heap = function() {
        Heap2.push = heappush;
        Heap2.pop = heappop;
        Heap2.replace = heapreplace;
        Heap2.pushpop = heappushpop;
        Heap2.heapify = heapify;
        Heap2.updateItem = updateItem;
        Heap2.nlargest = nlargest;
        Heap2.nsmallest = nsmallest;
        function Heap2(cmp) {
          this.cmp = cmp != null ? cmp : defaultCmp;
          this.nodes = [];
        }
        Heap2.prototype.push = function(x) {
          return heappush(this.nodes, x, this.cmp);
        };
        Heap2.prototype.pop = function() {
          return heappop(this.nodes, this.cmp);
        };
        Heap2.prototype.peek = function() {
          return this.nodes[0];
        };
        Heap2.prototype.contains = function(x) {
          return this.nodes.indexOf(x) !== -1;
        };
        Heap2.prototype.replace = function(x) {
          return heapreplace(this.nodes, x, this.cmp);
        };
        Heap2.prototype.pushpop = function(x) {
          return heappushpop(this.nodes, x, this.cmp);
        };
        Heap2.prototype.heapify = function() {
          return heapify(this.nodes, this.cmp);
        };
        Heap2.prototype.updateItem = function(x) {
          return updateItem(this.nodes, x, this.cmp);
        };
        Heap2.prototype.clear = function() {
          return this.nodes = [];
        };
        Heap2.prototype.empty = function() {
          return this.nodes.length === 0;
        };
        Heap2.prototype.size = function() {
          return this.nodes.length;
        };
        Heap2.prototype.clone = function() {
          var heap;
          heap = new Heap2();
          heap.nodes = this.nodes.slice(0);
          return heap;
        };
        Heap2.prototype.toArray = function() {
          return this.nodes.slice(0);
        };
        Heap2.prototype.insert = Heap2.prototype.push;
        Heap2.prototype.top = Heap2.prototype.peek;
        Heap2.prototype.front = Heap2.prototype.peek;
        Heap2.prototype.has = Heap2.prototype.contains;
        Heap2.prototype.copy = Heap2.prototype.clone;
        return Heap2;
      }();
      (function(root, factory) {
        if (typeof define === "function" && define.amd) {
          return define([], factory);
        } else if (typeof exports === "object") {
          return module.exports = factory();
        } else {
          return root.Heap = factory();
        }
      })(this, function() {
        return Heap;
      });
    }).call(exports);
  }
});

// node_modules/heap/index.js
var require_heap2 = __commonJS({
  "node_modules/heap/index.js"(exports, module) {
    module.exports = require_heap();
  }
});

// node_modules/easystarjs/src/easystar.js
var require_easystar = __commonJS({
  "node_modules/easystarjs/src/easystar.js"(exports, module) {
    var EasyStar = {};
    var Instance = require_instance();
    var Node = require_node();
    var Heap = require_heap2();
    var CLOSED_LIST = 0;
    var OPEN_LIST = 1;
    module.exports = EasyStar;
    var nextInstanceId = 1;
    EasyStar.js = function() {
      var STRAIGHT_COST = 1;
      var DIAGONAL_COST = 1.4;
      var syncEnabled = false;
      var pointsToAvoid = {};
      var collisionGrid;
      var costMap = {};
      var pointsToCost = {};
      var directionalConditions = {};
      var allowCornerCutting = true;
      var iterationsSoFar;
      var instances = {};
      var instanceQueue = [];
      var iterationsPerCalculation = Number.MAX_VALUE;
      var acceptableTiles;
      var diagonalsEnabled = false;
      this.setAcceptableTiles = function(tiles) {
        if (tiles instanceof Array) {
          acceptableTiles = tiles;
        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {
          acceptableTiles = [tiles];
        }
      };
      this.enableSync = function() {
        syncEnabled = true;
      };
      this.disableSync = function() {
        syncEnabled = false;
      };
      this.enableDiagonals = function() {
        diagonalsEnabled = true;
      };
      this.disableDiagonals = function() {
        diagonalsEnabled = false;
      };
      this.setGrid = function(grid) {
        collisionGrid = grid;
        for (var y = 0; y < collisionGrid.length; y++) {
          for (var x = 0; x < collisionGrid[0].length; x++) {
            if (!costMap[collisionGrid[y][x]]) {
              costMap[collisionGrid[y][x]] = 1;
            }
          }
        }
      };
      this.setTileCost = function(tileType, cost) {
        costMap[tileType] = cost;
      };
      this.setAdditionalPointCost = function(x, y, cost) {
        if (pointsToCost[y] === void 0) {
          pointsToCost[y] = {};
        }
        pointsToCost[y][x] = cost;
      };
      this.removeAdditionalPointCost = function(x, y) {
        if (pointsToCost[y] !== void 0) {
          delete pointsToCost[y][x];
        }
      };
      this.removeAllAdditionalPointCosts = function() {
        pointsToCost = {};
      };
      this.setDirectionalCondition = function(x, y, allowedDirections) {
        if (directionalConditions[y] === void 0) {
          directionalConditions[y] = {};
        }
        directionalConditions[y][x] = allowedDirections;
      };
      this.removeAllDirectionalConditions = function() {
        directionalConditions = {};
      };
      this.setIterationsPerCalculation = function(iterations) {
        iterationsPerCalculation = iterations;
      };
      this.avoidAdditionalPoint = function(x, y) {
        if (pointsToAvoid[y] === void 0) {
          pointsToAvoid[y] = {};
        }
        pointsToAvoid[y][x] = 1;
      };
      this.stopAvoidingAdditionalPoint = function(x, y) {
        if (pointsToAvoid[y] !== void 0) {
          delete pointsToAvoid[y][x];
        }
      };
      this.enableCornerCutting = function() {
        allowCornerCutting = true;
      };
      this.disableCornerCutting = function() {
        allowCornerCutting = false;
      };
      this.stopAvoidingAllAdditionalPoints = function() {
        pointsToAvoid = {};
      };
      this.findPath = function(startX, startY, endX, endY, callback) {
        var callbackWrapper = function(result) {
          if (syncEnabled) {
            callback(result);
          } else {
            setTimeout(function() {
              callback(result);
            });
          }
        };
        if (acceptableTiles === void 0) {
          throw new Error("You can't set a path without first calling setAcceptableTiles() on EasyStar.");
        }
        if (collisionGrid === void 0) {
          throw new Error("You can't set a path without first calling setGrid() on EasyStar.");
        }
        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 || startX > collisionGrid[0].length - 1 || startY > collisionGrid.length - 1 || endX > collisionGrid[0].length - 1 || endY > collisionGrid.length - 1) {
          throw new Error("Your start or end point is outside the scope of your grid.");
        }
        if (startX === endX && startY === endY) {
          callbackWrapper([]);
          return;
        }
        var endTile = collisionGrid[endY][endX];
        var isAcceptable = false;
        for (var i = 0; i < acceptableTiles.length; i++) {
          if (endTile === acceptableTiles[i]) {
            isAcceptable = true;
            break;
          }
        }
        if (isAcceptable === false) {
          callbackWrapper(null);
          return;
        }
        var instance = new Instance();
        instance.openList = new Heap(function(nodeA, nodeB) {
          return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();
        });
        instance.isDoneCalculating = false;
        instance.nodeHash = {};
        instance.startX = startX;
        instance.startY = startY;
        instance.endX = endX;
        instance.endY = endY;
        instance.callback = callbackWrapper;
        instance.openList.push(coordinateToNode(
          instance,
          instance.startX,
          instance.startY,
          null,
          STRAIGHT_COST
        ));
        var instanceId = nextInstanceId++;
        instances[instanceId] = instance;
        instanceQueue.push(instanceId);
        return instanceId;
      };
      this.cancelPath = function(instanceId) {
        if (instanceId in instances) {
          delete instances[instanceId];
          return true;
        }
        return false;
      };
      this.calculate = function() {
        if (instanceQueue.length === 0 || collisionGrid === void 0 || acceptableTiles === void 0) {
          return;
        }
        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {
          if (instanceQueue.length === 0) {
            return;
          }
          if (syncEnabled) {
            iterationsSoFar = 0;
          }
          var instanceId = instanceQueue[0];
          var instance = instances[instanceId];
          if (typeof instance == "undefined") {
            instanceQueue.shift();
            continue;
          }
          if (instance.openList.size() === 0) {
            instance.callback(null);
            delete instances[instanceId];
            instanceQueue.shift();
            continue;
          }
          var searchNode = instance.openList.pop();
          if (instance.endX === searchNode.x && instance.endY === searchNode.y) {
            var path = [];
            path.push({ x: searchNode.x, y: searchNode.y });
            var parent = searchNode.parent;
            while (parent != null) {
              path.push({ x: parent.x, y: parent.y });
              parent = parent.parent;
            }
            path.reverse();
            var ip = path;
            instance.callback(ip);
            delete instances[instanceId];
            instanceQueue.shift();
            continue;
          }
          searchNode.list = CLOSED_LIST;
          if (searchNode.y > 0) {
            checkAdjacentNode(
              instance,
              searchNode,
              0,
              -1,
              STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y - 1)
            );
          }
          if (searchNode.x < collisionGrid[0].length - 1) {
            checkAdjacentNode(
              instance,
              searchNode,
              1,
              0,
              STRAIGHT_COST * getTileCost(searchNode.x + 1, searchNode.y)
            );
          }
          if (searchNode.y < collisionGrid.length - 1) {
            checkAdjacentNode(
              instance,
              searchNode,
              0,
              1,
              STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y + 1)
            );
          }
          if (searchNode.x > 0) {
            checkAdjacentNode(
              instance,
              searchNode,
              -1,
              0,
              STRAIGHT_COST * getTileCost(searchNode.x - 1, searchNode.y)
            );
          }
          if (diagonalsEnabled) {
            if (searchNode.x > 0 && searchNode.y > 0) {
              if (allowCornerCutting || isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y - 1, searchNode) && isTileWalkable(collisionGrid, acceptableTiles, searchNode.x - 1, searchNode.y, searchNode)) {
                checkAdjacentNode(
                  instance,
                  searchNode,
                  -1,
                  -1,
                  DIAGONAL_COST * getTileCost(searchNode.x - 1, searchNode.y - 1)
                );
              }
            }
            if (searchNode.x < collisionGrid[0].length - 1 && searchNode.y < collisionGrid.length - 1) {
              if (allowCornerCutting || isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y + 1, searchNode) && isTileWalkable(collisionGrid, acceptableTiles, searchNode.x + 1, searchNode.y, searchNode)) {
                checkAdjacentNode(
                  instance,
                  searchNode,
                  1,
                  1,
                  DIAGONAL_COST * getTileCost(searchNode.x + 1, searchNode.y + 1)
                );
              }
            }
            if (searchNode.x < collisionGrid[0].length - 1 && searchNode.y > 0) {
              if (allowCornerCutting || isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y - 1, searchNode) && isTileWalkable(collisionGrid, acceptableTiles, searchNode.x + 1, searchNode.y, searchNode)) {
                checkAdjacentNode(
                  instance,
                  searchNode,
                  1,
                  -1,
                  DIAGONAL_COST * getTileCost(searchNode.x + 1, searchNode.y - 1)
                );
              }
            }
            if (searchNode.x > 0 && searchNode.y < collisionGrid.length - 1) {
              if (allowCornerCutting || isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y + 1, searchNode) && isTileWalkable(collisionGrid, acceptableTiles, searchNode.x - 1, searchNode.y, searchNode)) {
                checkAdjacentNode(
                  instance,
                  searchNode,
                  -1,
                  1,
                  DIAGONAL_COST * getTileCost(searchNode.x - 1, searchNode.y + 1)
                );
              }
            }
          }
        }
      };
      var checkAdjacentNode = function(instance, searchNode, x, y, cost) {
        var adjacentCoordinateX = searchNode.x + x;
        var adjacentCoordinateY = searchNode.y + y;
        if ((pointsToAvoid[adjacentCoordinateY] === void 0 || pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === void 0) && isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {
          var node = coordinateToNode(
            instance,
            adjacentCoordinateX,
            adjacentCoordinateY,
            searchNode,
            cost
          );
          if (node.list === void 0) {
            node.list = OPEN_LIST;
            instance.openList.push(node);
          } else if (searchNode.costSoFar + cost < node.costSoFar) {
            node.costSoFar = searchNode.costSoFar + cost;
            node.parent = searchNode;
            instance.openList.updateItem(node);
          }
        }
      };
      var isTileWalkable = function(collisionGrid2, acceptableTiles2, x, y, sourceNode) {
        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];
        if (directionalCondition) {
          var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y);
          var directionIncluded = function() {
            for (var i2 = 0; i2 < directionalCondition.length; i2++) {
              if (directionalCondition[i2] === direction) return true;
            }
            return false;
          };
          if (!directionIncluded()) return false;
        }
        for (var i = 0; i < acceptableTiles2.length; i++) {
          if (collisionGrid2[y][x] === acceptableTiles2[i]) {
            return true;
          }
        }
        return false;
      };
      var calculateDirection = function(diffX, diffY) {
        if (diffX === 0 && diffY === -1) return EasyStar.TOP;
        else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT;
        else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT;
        else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT;
        else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM;
        else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT;
        else if (diffX === -1 && diffY === 0) return EasyStar.LEFT;
        else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT;
        throw new Error("These differences are not valid: " + diffX + ", " + diffY);
      };
      var getTileCost = function(x, y) {
        return pointsToCost[y] && pointsToCost[y][x] || costMap[collisionGrid[y][x]];
      };
      var coordinateToNode = function(instance, x, y, parent, cost) {
        if (instance.nodeHash[y] !== void 0) {
          if (instance.nodeHash[y][x] !== void 0) {
            return instance.nodeHash[y][x];
          }
        } else {
          instance.nodeHash[y] = {};
        }
        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);
        if (parent !== null) {
          var costSoFar = parent.costSoFar + cost;
        } else {
          costSoFar = 0;
        }
        var node = new Node(parent, x, y, costSoFar, simpleDistanceToTarget);
        instance.nodeHash[y][x] = node;
        return node;
      };
      var getDistance = function(x1, y1, x2, y2) {
        if (diagonalsEnabled) {
          var dx = Math.abs(x1 - x2);
          var dy = Math.abs(y1 - y2);
          if (dx < dy) {
            return DIAGONAL_COST * dx + dy;
          } else {
            return DIAGONAL_COST * dy + dx;
          }
        } else {
          var dx = Math.abs(x1 - x2);
          var dy = Math.abs(y1 - y2);
          return dx + dy;
        }
      };
    };
    EasyStar.TOP = "TOP";
    EasyStar.TOP_RIGHT = "TOP_RIGHT";
    EasyStar.RIGHT = "RIGHT";
    EasyStar.BOTTOM_RIGHT = "BOTTOM_RIGHT";
    EasyStar.BOTTOM = "BOTTOM";
    EasyStar.BOTTOM_LEFT = "BOTTOM_LEFT";
    EasyStar.LEFT = "LEFT";
    EasyStar.TOP_LEFT = "TOP_LEFT";
  }
});
export default require_easystar();
//# sourceMappingURL=easystarjs.js.map
